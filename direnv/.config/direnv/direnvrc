# shellcheck shell=bash

layout_uv() {
  if [ -f ".python-version" ]; then
    python_version=$(cat .python-version)
  else
    python_version=$(python --version 2>&1 | cut -d' ' -f2)
  fi

  VIRTUAL_ENV="$(pwd)/.venv/$python_version"

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
    log_status 'No virtual environment exists. Executing "uv venv" to create one.'
    uv venv "$VIRTUAL_ENV" --python "$python_version"
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export UV_ACTIVE=1
  export VIRTUAL_ENV
  export UV_PROJECT_ENVIRONMENT=$VIRTUAL_ENV
}

layout_poetry() {
  if ! has poetry; then
    log_error "Poetry is not installed"
    return 1
  fi

  PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
  if [[ ! -f $PYPROJECT_TOML ]]; then
    log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
    poetry init
  fi

  if [[ -d ".venv" ]]; then
    VIRTUAL_ENV="$(pwd)/.venv"
  else
    VIRTUAL_ENV=$(
      poetry env info --path 2>/dev/null
      true
    )
  fi

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
    log_status "No virtual environment exists. Executing 'poetry install' to create one."

    if [ -f ".python-version" ]; then
      python_version=$(cat .python-version)
      log_status "Found .python-version file using python $python_version"
      poetry env use "$python_version"
    fi

    poetry install
    VIRTUAL_ENV=$(poetry env info --path)
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export POETRY_ACTIVE=1 # or VENV_ACTIVE=1
  export VIRTUAL_ENV
}
