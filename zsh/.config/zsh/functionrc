#!/bin/sh

#------------------------------
# Checkout git branch (including remote branches), sorted by most recent commit
# remote branches are checked out as a new local branch if they don't exist
#------------------------------
fco() {
  local branches branch
  branches=$(git for-each-ref --sort=-committerdate refs/ --format="%(refname:short)") &&
    branch=$(
      echo "$branches" |
        fzf \
          --no-sort \
          --preview="git --no-pager branchdiff -150 '..{}'"
    ) &&
    git checkout $(echo "$branch" | sed "s/origin\///")
}

#------------------------------
# Checkout pull request
#------------------------------
fpr() {
  local prs pr
  prs=$(hub pr list --format="%I|%t (%l)%n") &&
    pr=$(
      echo "$prs" |
        fzf \
          --delimiter="\|" \
          --with-nth=2 \
          --preview="hub pr show {1} --format='%i %t%nlabels: %L%ncreated: %cr%nbranch: %H%nauthor: %au%nassigned: %as%nreview: %rs%n%n%b'"
    ) &&
    hub pr checkout $(echo "$pr" | cut -d "|" -f 1)
}

#--------------------------------
# Open a file with default editor
#--------------------------------
vv() {
  local file
  file=$(
    eval "$FZF_DEFAULT_COMMAND" |
      fzf --preview 'bat --color=always {} | head -$LINES'
  ) && $EDITOR $file
}

#--------------------------------------------
# Autosource virtualenv; Workarround for nvim
#--------------------------------------------
nvimvenv() {
  if [[ -e "$VIRTUAL_ENV" && -f "$VIRTUAL_ENV/bin/activate" ]]; then
    source "$VIRTUAL_ENV/bin/activate"
    command nvim $@
    deactivate
  else
    command nvim $@
  fi
}
